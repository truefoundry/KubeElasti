name: Release Elasti Helm Chart

on:
  push:
    tags:
      - v*

env:
  HELM_REGISTRY_URL: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}
  HELM_REGISTRY_USERNAME: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
  HELM_REGISTRY_PASSWORD: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}
  HELM_CHART_REPOSITORY: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_HELM_REPOSITORY }}

jobs:
  # Read chart values first
  read-chart-values:
    runs-on: ubuntu-latest
    outputs:
      chart_version: ${{ steps.read_chart.outputs.CHART_VERSION }}
      app_version: ${{ steps.read_chart.outputs.APP_VERSION }}
      chart_name: ${{ steps.read_chart.outputs.CHART_NAME }}
      resolver_tag: ${{ steps.read_chart.outputs.RESOLVER_TAG }}
      operator_tag: ${{ steps.read_chart.outputs.OPERATOR_TAG }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Read chart values
        id: read_chart
        run: |
          CHART_VERSION=$(yq -r '.version' charts/elasti/Chart.yaml)
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT

          APP_VERSION=$(yq -r '.appVersion' charts/elasti/Chart.yaml)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT

          CHART_NAME=$(yq -r '.name' charts/elasti/Chart.yaml)
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_OUTPUT

          RESOLVER_TAG=$(yq -r '.elastiResolver.proxy.image.tag' charts/elasti/values.yaml)
          echo "RESOLVER_TAG=$RESOLVER_TAG" >> $GITHUB_OUTPUT

          OPERATOR_TAG=$(yq -r '.elastiController.manager.image.tag' charts/elasti/values.yaml)
          echo "OPERATOR_TAG=$OPERATOR_TAG" >> $GITHUB_OUTPUT

          echo "Chart values read: $CHART_NAME v$CHART_VERSION (app v$APP_VERSION)"
          echo "Resolver tag: $RESOLVER_TAG"
          echo "Operator tag: $OPERATOR_TAG"

  # Build and push operator image
  build-operator:
    name: Build and Push Operator Docker Images
    needs: [read-chart-values]
    uses: truefoundry/github-workflows-public/.github/workflows/build.yml@main
    with:
      image_tag: ${{ needs.read-chart-values.outputs.operator_tag }}
      image_artifact_name: "elasti-operator"
      dockerfile_path: "operator/Dockerfile"
      artifactory_registry_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}
      artifactory_repository_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_REPOSITORY }}
    secrets:
      artifactory_username: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
      artifactory_password: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}

  # Build and push resolver image
  build-resolver:
    name: Build and Push Resolver Docker Images
    needs: [read-chart-values]
    uses: truefoundry/github-workflows-public/.github/workflows/build.yml@main
    with:
      image_tag: ${{ needs.read-chart-values.outputs.resolver_tag }}
      image_artifact_name: "elasti-resolver"
      dockerfile_path: "resolver/Dockerfile"
      artifactory_registry_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}
      artifactory_repository_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_REPOSITORY }}
    secrets:
      artifactory_username: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
      artifactory_password: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}

  # Release the Helm chart
  release:
    runs-on: ubuntu-latest
    needs: [build-operator, build-resolver, read-chart-values]
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Helm registry login
        run: |
          helm registry login -u ${{ env.HELM_REGISTRY_USERNAME}} -p ${{ env.HELM_REGISTRY_PASSWORD }} ${{ env.HELM_REGISTRY_URL }}

      - name: Helm push
        run: |
          cd charts
          CHART_DIR=elasti
          CHART_NAME=${{ needs.read-chart-values.outputs.chart_name }}
          CHART_VERSION=${{ needs.read-chart-values.outputs.chart_version }}
              
          # packaging chart
          helm dependency update $CHART_DIR
          helm package $CHART_DIR

          # pushing the helm charts
          echo "Pushing Chart: $CHART_NAME"
          echo "Version: $CHART_NAME-$CHART_VERSION.tgz"
          helm push $CHART_NAME-$CHART_VERSION.tgz oci://${{ env.HELM_CHART_REPOSITORY}}
          echo "Successfully pushed chart: $CHART_NAME"
