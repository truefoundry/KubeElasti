name: Release Elasti Helm Chart

on:
  push:
    tags:
      - v*

env:
  HELM_REGISTRY_URL: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}
  HELM_REGISTRY_USERNAME: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
  HELM_REGISTRY_PASSWORD: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}
  HELM_CHART_REPOSITORY: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_HELM_REPOSITORY }}
    
jobs:
  # Build and push operator image
  build-operator:
    name: Build and Push Operator Docker Images
    uses: truefoundry/github-workflows-public/.github/workflows/build.yml@main
    with:
      image_tag: ${{ github.ref_name }}
      image_artifact_name: 'elasti-operator'
      dockerfile_path: 'operator/Dockerfile'
      artifactory_registry_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}
      artifactory_repository_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_REPOSITORY }}
    secrets:
      artifactory_username: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
      artifactory_password: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}

  # Build and push resolver image
  build-resolver:
    name: Build and Push Resolver Docker Images
    uses: truefoundry/github-workflows-public/.github/workflows/build.yml@main
    with:
      image_tag: ${{ github.ref_name }}
      image_artifact_name: 'elasti-resolver'
      dockerfile_path: 'resolver/Dockerfile'
      artifactory_registry_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}
      artifactory_repository_url: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_REPOSITORY }}
    secrets:
      artifactory_username: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
      artifactory_password: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}

  # Release the Helm chart
  release:
    runs-on: ubuntu-latest
    needs: [build-operator, build-resolver]
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
    
      - name: Install tools
        run: |
            # Install yq
            sudo apt update && sudo apt install wget jq -y
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq

      - name: Extract image tag and version
        id: extract_info
        run: |
          # Extract tag from github.ref_name (remove 'elasti-helm-v' prefix)
          IMAGE_TAG=$(echo "${{ github.ref_name }}" | sed 's/elasti-helm-v//')
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Get chart version using jq from Chart.yaml
          CHART_VERSION=$(jq -r '.version' charts/elasti/Chart.yaml)
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT

      - name: Update Helm values.yaml with image tags
        run: |
          # Update image tags in values.yaml
          jq '.elastiController.manager.image.tag = "${{ steps.extract_info.outputs.IMAGE_TAG }}"' charts/elasti/values.yaml > tmp.yaml && mv tmp.yaml charts/elasti/values.yaml
          jq '.elastiResolver.proxy.image.tag = "${{ steps.extract_info.outputs.IMAGE_TAG }}"' charts/elasti/values.yaml > tmp.yaml && mv tmp.yaml charts/elasti/values.yaml

      - name: Helm registry login
        run: |
          helm registry login -u ${{ env.HELM_REGISTRY_USERNAME}} -p ${{ env.HELM_REGISTRY_PASSWORD }} ${{ env.HELM_REGISTRY_URL }}
     
      - name: Helm push 
        run: |
            cd charts
            for CHART_DIR in $(ls -d */)
            do
                CHART_DIR=$(basename $CHART_DIR)
                echo "CHARTDIR: $CHART_DIR/Chart.yaml"
                # getting chart name and versions using jq
                CHART_NAME=$(jq -r '.name' $CHART_DIR/Chart.yaml)
                CHART_VERSION=$(jq -r '.version' "$CHART_DIR"/Chart.yaml)
                
                # packaging chart
                helm dependency update $CHART_DIR
                helm package $CHART_DIR

                # pushing the helm charts
                echo "Pushing Chart: $CHART_NAME"
                echo "Version: $CHART_NAME-$CHART_VERSION.tgz"
                helm push $CHART_NAME-$CHART_VERSION.tgz oci://${{ env.HELM_CHART_REPOSITORY}}
                echo "Successfully pushed chart: $CHART_NAME"
            done